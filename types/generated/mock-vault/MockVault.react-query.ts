// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  OracleBaseForString,
  InstantiateMsg,
  ExecuteMsg,
  QueryMsg,
  Uint128,
  VaultInfo,
  Coin,
  ArrayOfCoin,
} from './MockVault.types'
import { MockVaultQueryClient, MockVaultClient } from './MockVault.client'
export const mockVaultQueryKeys = {
  contract: [
    {
      contract: 'mockVault',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...mockVaultQueryKeys.contract[0], address: contractAddress }] as const,
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...mockVaultQueryKeys.address(contractAddress)[0], method: 'info', args }] as const,
  previewRedeem: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...mockVaultQueryKeys.address(contractAddress)[0], method: 'preview_redeem', args },
    ] as const,
  totalVaultCoinsIssued: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...mockVaultQueryKeys.address(contractAddress)[0],
        method: 'total_vault_coins_issued',
        args,
      },
    ] as const,
}
export interface MockVaultReactQuery<TResponse, TData = TResponse> {
  client: MockVaultQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MockVaultTotalVaultCoinsIssuedQuery<TData>
  extends MockVaultReactQuery<Uint128, TData> {}
export function useMockVaultTotalVaultCoinsIssuedQuery<TData = Uint128>({
  client,
  options,
}: MockVaultTotalVaultCoinsIssuedQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    mockVaultQueryKeys.totalVaultCoinsIssued(client?.contractAddress),
    () => (client ? client.totalVaultCoinsIssued() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultPreviewRedeemQuery<TData>
  extends MockVaultReactQuery<ArrayOfCoin, TData> {
  args: {
    amount: Uint128
  }
}
export function useMockVaultPreviewRedeemQuery<TData = ArrayOfCoin>({
  client,
  args,
  options,
}: MockVaultPreviewRedeemQuery<TData>) {
  return useQuery<ArrayOfCoin, Error, TData>(
    mockVaultQueryKeys.previewRedeem(client?.contractAddress, args),
    () =>
      client
        ? client.previewRedeem({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultInfoQuery<TData> extends MockVaultReactQuery<VaultInfo, TData> {}
export function useMockVaultInfoQuery<TData = VaultInfo>({
  client,
  options,
}: MockVaultInfoQuery<TData>) {
  return useQuery<VaultInfo, Error, TData>(
    mockVaultQueryKeys.info(client?.contractAddress),
    () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MockVaultForceWithdrawMutation {
  client: MockVaultClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultForceWithdrawMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MockVaultForceWithdrawMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MockVaultForceWithdrawMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.forceWithdraw(fee, memo, funds),
    options,
  )
}
export interface MockVaultWithdrawMutation {
  client: MockVaultClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultWithdrawMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockVaultWithdrawMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockVaultWithdrawMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.withdraw(fee, memo, funds),
    options,
  )
}
export interface MockVaultDepositMutation {
  client: MockVaultClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMockVaultDepositMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MockVaultDepositMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, MockVaultDepositMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.deposit(fee, memo, funds),
    options,
  )
}
