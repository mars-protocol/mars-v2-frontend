// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  CoinMarketInfo,
  ExecuteMsg,
  Uint128,
  Coin,
  QueryMsg,
  Market,
  InterestRateModel,
  UserAssetDebtResponse,
} from './MockRedBank.types'
export interface MockRedBankReadOnlyInterface {
  contractAddress: string
  userAssetDebt: ({
    denom,
    userAddress,
  }: {
    denom: string
    userAddress: string
  }) => Promise<UserAssetDebtResponse>
  market: ({ denom }: { denom: string }) => Promise<Market>
}
export class MockRedBankQueryClient implements MockRedBankReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.userAssetDebt = this.userAssetDebt.bind(this)
    this.market = this.market.bind(this)
  }

  userAssetDebt = async ({
    denom,
    userAddress,
  }: {
    denom: string
    userAddress: string
  }): Promise<UserAssetDebtResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_asset_debt: {
        denom,
        user_address: userAddress,
      },
    })
  }
  market = async ({ denom }: { denom: string }): Promise<Market> => {
    return this.client.queryContractSmart(this.contractAddress, {
      market: {
        denom,
      },
    })
  }
}
export interface MockRedBankInterface extends MockRedBankReadOnlyInterface {
  contractAddress: string
  sender: string
  borrow: (
    {
      coin,
      recipient,
    }: {
      coin: Coin
      recipient?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
  repay: (
    {
      denom,
      onBehalfOf,
    }: {
      denom: string
      onBehalfOf?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MockRedBankClient extends MockRedBankQueryClient implements MockRedBankInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.borrow = this.borrow.bind(this)
    this.repay = this.repay.bind(this)
  }

  borrow = async (
    {
      coin,
      recipient,
    }: {
      coin: Coin
      recipient?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        borrow: {
          coin,
          recipient,
        },
      },
      fee,
      memo,
      funds,
    )
  }
  repay = async (
    {
      denom,
      onBehalfOf,
    }: {
      denom: string
      onBehalfOf?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        repay: {
          denom,
          on_behalf_of: onBehalfOf,
        },
      },
      fee,
      memo,
      funds,
    )
  }
}
