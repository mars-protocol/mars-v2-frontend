// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  Expiration,
  Timestamp,
  Uint64,
  QueryMsg,
  AllNftInfoResponseForEmpty,
  OwnerOfResponse,
  Approval,
  NftInfoResponseForEmpty,
  Empty,
  OperatorsResponse,
  TokensResponse,
  ApprovalResponse,
  ApprovalsResponse,
  ContractInfoResponse,
  MinterResponse,
  NumTokensResponse,
  String,
} from './AccountNft.types'
import { AccountNftQueryClient, AccountNftClient } from './AccountNft.client'
export const accountNftQueryKeys = {
  contract: [
    {
      contract: 'accountNft',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...accountNftQueryKeys.contract[0], address: contractAddress }] as const,
  proposedNewOwner: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...accountNftQueryKeys.address(contractAddress)[0], method: 'proposed_new_owner', args },
    ] as const,
  ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'owner_of', args }] as const,
  approval: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'approval', args }] as const,
  approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'approvals', args }] as const,
  allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...accountNftQueryKeys.address(contractAddress)[0], method: 'all_operators', args },
    ] as const,
  numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'num_tokens', args }] as const,
  contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...accountNftQueryKeys.address(contractAddress)[0], method: 'contract_info', args },
    ] as const,
  nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'nft_info', args }] as const,
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'all_nft_info', args }] as const,
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'tokens', args }] as const,
  allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'all_tokens', args }] as const,
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...accountNftQueryKeys.address(contractAddress)[0], method: 'minter', args }] as const,
}
export interface AccountNftReactQuery<TResponse, TData = TResponse> {
  client: AccountNftQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface AccountNftMinterQuery<TData> extends AccountNftReactQuery<MinterResponse, TData> {}
export function useAccountNftMinterQuery<TData = MinterResponse>({
  client,
  options,
}: AccountNftMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(
    accountNftQueryKeys.minter(client?.contractAddress),
    () => (client ? client.minter() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftAllTokensQuery<TData>
  extends AccountNftReactQuery<TokensResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useAccountNftAllTokensQuery<TData = TokensResponse>({
  client,
  args,
  options,
}: AccountNftAllTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(
    accountNftQueryKeys.allTokens(client?.contractAddress, args),
    () =>
      client
        ? client.allTokens({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftTokensQuery<TData> extends AccountNftReactQuery<TokensResponse, TData> {
  args: {
    limit?: number
    owner: string
    startAfter?: string
  }
}
export function useAccountNftTokensQuery<TData = TokensResponse>({
  client,
  args,
  options,
}: AccountNftTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(
    accountNftQueryKeys.tokens(client?.contractAddress, args),
    () =>
      client
        ? client.tokens({
            limit: args.limit,
            owner: args.owner,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftAllNftInfoQuery<TData>
  extends AccountNftReactQuery<AllNftInfoResponseForEmpty, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useAccountNftAllNftInfoQuery<TData = AllNftInfoResponseForEmpty>({
  client,
  args,
  options,
}: AccountNftAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponseForEmpty, Error, TData>(
    accountNftQueryKeys.allNftInfo(client?.contractAddress, args),
    () =>
      client
        ? client.allNftInfo({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftNftInfoQuery<TData>
  extends AccountNftReactQuery<NftInfoResponseForEmpty, TData> {
  args: {
    tokenId: string
  }
}
export function useAccountNftNftInfoQuery<TData = NftInfoResponseForEmpty>({
  client,
  args,
  options,
}: AccountNftNftInfoQuery<TData>) {
  return useQuery<NftInfoResponseForEmpty, Error, TData>(
    accountNftQueryKeys.nftInfo(client?.contractAddress, args),
    () =>
      client
        ? client.nftInfo({
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftContractInfoQuery<TData>
  extends AccountNftReactQuery<ContractInfoResponse, TData> {}
export function useAccountNftContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options,
}: AccountNftContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(
    accountNftQueryKeys.contractInfo(client?.contractAddress),
    () => (client ? client.contractInfo() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftNumTokensQuery<TData>
  extends AccountNftReactQuery<NumTokensResponse, TData> {}
export function useAccountNftNumTokensQuery<TData = NumTokensResponse>({
  client,
  options,
}: AccountNftNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(
    accountNftQueryKeys.numTokens(client?.contractAddress),
    () => (client ? client.numTokens() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftAllOperatorsQuery<TData>
  extends AccountNftReactQuery<OperatorsResponse, TData> {
  args: {
    includeExpired?: boolean
    limit?: number
    owner: string
    startAfter?: string
  }
}
export function useAccountNftAllOperatorsQuery<TData = OperatorsResponse>({
  client,
  args,
  options,
}: AccountNftAllOperatorsQuery<TData>) {
  return useQuery<OperatorsResponse, Error, TData>(
    accountNftQueryKeys.allOperators(client?.contractAddress, args),
    () =>
      client
        ? client.allOperators({
            includeExpired: args.includeExpired,
            limit: args.limit,
            owner: args.owner,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftApprovalsQuery<TData>
  extends AccountNftReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useAccountNftApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options,
}: AccountNftApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(
    accountNftQueryKeys.approvals(client?.contractAddress, args),
    () =>
      client
        ? client.approvals({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftApprovalQuery<TData>
  extends AccountNftReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean
    spender: string
    tokenId: string
  }
}
export function useAccountNftApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options,
}: AccountNftApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(
    accountNftQueryKeys.approval(client?.contractAddress, args),
    () =>
      client
        ? client.approval({
            includeExpired: args.includeExpired,
            spender: args.spender,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftOwnerOfQuery<TData>
  extends AccountNftReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useAccountNftOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options,
}: AccountNftOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(
    accountNftQueryKeys.ownerOf(client?.contractAddress, args),
    () =>
      client
        ? client.ownerOf({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftProposedNewOwnerQuery<TData>
  extends AccountNftReactQuery<String, TData> {}
export function useAccountNftProposedNewOwnerQuery<TData = String>({
  client,
  options,
}: AccountNftProposedNewOwnerQuery<TData>) {
  return useQuery<String, Error, TData>(
    accountNftQueryKeys.proposedNewOwner(client?.contractAddress),
    () => (client ? client.proposedNewOwner() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface AccountNftBurnMutation {
  client: AccountNftClient
  msg: {
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftBurnMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountNftBurnMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, AccountNftBurnMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.burn(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftRevokeAllMutation {
  client: AccountNftClient
  msg: {
    operator: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftRevokeAllMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AccountNftRevokeAllMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, AccountNftRevokeAllMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.revokeAll(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftApproveAllMutation {
  client: AccountNftClient
  msg: {
    expires?: Expiration
    operator: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftApproveAllMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AccountNftApproveAllMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, AccountNftApproveAllMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.approveAll(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftRevokeMutation {
  client: AccountNftClient
  msg: {
    spender: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftRevokeMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountNftRevokeMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, AccountNftRevokeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.revoke(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftApproveMutation {
  client: AccountNftClient
  msg: {
    expires?: Expiration
    spender: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftApproveMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountNftApproveMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, AccountNftApproveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.approve(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftSendNftMutation {
  client: AccountNftClient
  msg: {
    contract: string
    msg: Binary
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftSendNftMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountNftSendNftMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, AccountNftSendNftMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.sendNft(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftTransferNftMutation {
  client: AccountNftClient
  msg: {
    recipient: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftTransferNftMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AccountNftTransferNftMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, AccountNftTransferNftMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.transferNft(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftMintMutation {
  client: AccountNftClient
  msg: {
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftMintMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AccountNftMintMutation>, 'mutationFn'>,
) {
  return useMutation<ExecuteResult, Error, AccountNftMintMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.mint(msg, fee, memo, funds),
    options,
  )
}
export interface AccountNftAcceptOwnershipMutation {
  client: AccountNftClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftAcceptOwnershipMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AccountNftAcceptOwnershipMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, AccountNftAcceptOwnershipMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.acceptOwnership(fee, memo, funds),
    options,
  )
}
export interface AccountNftProposeNewOwnerMutation {
  client: AccountNftClient
  msg: {
    newOwner: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAccountNftProposeNewOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AccountNftProposeNewOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, AccountNftProposeNewOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.proposeNewOwner(msg, fee, memo, funds),
    options,
  )
}
