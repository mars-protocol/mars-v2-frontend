// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  OracleBaseForString,
  Addr,
  PricingMethod,
  InstantiateMsg,
  VaultPricingInfo,
  ExecuteMsg,
  ConfigUpdates,
  QueryMsg,
  ArrayOfVaultPricingInfo,
  OracleBaseForAddr,
  ConfigResponse,
  Decimal,
  PriceResponse,
} from './MarsOracleAdapter.types'
import { MarsOracleAdapterQueryClient, MarsOracleAdapterClient } from './MarsOracleAdapter.client'
export const marsOracleAdapterQueryKeys = {
  contract: [
    {
      contract: 'marsOracleAdapter',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...marsOracleAdapterQueryKeys.contract[0], address: contractAddress }] as const,
  price: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...marsOracleAdapterQueryKeys.address(contractAddress)[0], method: 'price', args }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsOracleAdapterQueryKeys.address(contractAddress)[0], method: 'config', args },
    ] as const,
  pricingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsOracleAdapterQueryKeys.address(contractAddress)[0], method: 'pricing_info', args },
    ] as const,
  allPricingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsOracleAdapterQueryKeys.address(contractAddress)[0],
        method: 'all_pricing_info',
        args,
      },
    ] as const,
}
export interface MarsOracleAdapterReactQuery<TResponse, TData = TResponse> {
  client: MarsOracleAdapterQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsOracleAdapterAllPricingInfoQuery<TData>
  extends MarsOracleAdapterReactQuery<ArrayOfVaultPricingInfo, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useMarsOracleAdapterAllPricingInfoQuery<TData = ArrayOfVaultPricingInfo>({
  client,
  args,
  options,
}: MarsOracleAdapterAllPricingInfoQuery<TData>) {
  return useQuery<ArrayOfVaultPricingInfo, Error, TData>(
    marsOracleAdapterQueryKeys.allPricingInfo(client?.contractAddress, args),
    () =>
      client
        ? client.allPricingInfo({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsOracleAdapterPricingInfoQuery<TData>
  extends MarsOracleAdapterReactQuery<VaultPricingInfo, TData> {
  args: {
    denom: string
  }
}
export function useMarsOracleAdapterPricingInfoQuery<TData = VaultPricingInfo>({
  client,
  args,
  options,
}: MarsOracleAdapterPricingInfoQuery<TData>) {
  return useQuery<VaultPricingInfo, Error, TData>(
    marsOracleAdapterQueryKeys.pricingInfo(client?.contractAddress, args),
    () =>
      client
        ? client.pricingInfo({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsOracleAdapterConfigQuery<TData>
  extends MarsOracleAdapterReactQuery<ConfigResponse, TData> {}
export function useMarsOracleAdapterConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: MarsOracleAdapterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    marsOracleAdapterQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsOracleAdapterPriceQuery<TData>
  extends MarsOracleAdapterReactQuery<PriceResponse, TData> {
  args: {
    denom: string
  }
}
export function useMarsOracleAdapterPriceQuery<TData = PriceResponse>({
  client,
  args,
  options,
}: MarsOracleAdapterPriceQuery<TData>) {
  return useQuery<PriceResponse, Error, TData>(
    marsOracleAdapterQueryKeys.price(client?.contractAddress, args),
    () =>
      client
        ? client.price({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsOracleAdapterUpdateConfigMutation {
  client: MarsOracleAdapterClient
  msg: {
    newConfig: ConfigUpdates
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsOracleAdapterUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsOracleAdapterUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsOracleAdapterUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
