// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  OracleBaseForString,
  Addr,
  PricingMethod,
  InstantiateMsg,
  VaultPricingInfo,
  ExecuteMsg,
  ConfigUpdates,
  QueryMsg,
  Uint128,
  Coin,
  ArrayOfVaultPricingInfo,
  OracleBaseForAddr,
  ConfigResponse,
  Decimal,
  PriceResponse,
  ArrayOfCoin,
} from './MarsOracleAdapter.types'
export interface MarsOracleAdapterReadOnlyInterface {
  contractAddress: string
  price: ({ denom }: { denom: string }) => Promise<PriceResponse>
  priceableUnderlying: ({ coin }: { coin: Coin }) => Promise<ArrayOfCoin>
  config: () => Promise<ConfigResponse>
  pricingInfo: ({ denom }: { denom: string }) => Promise<VaultPricingInfo>
  allPricingInfo: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }) => Promise<ArrayOfVaultPricingInfo>
}
export class MarsOracleAdapterQueryClient implements MarsOracleAdapterReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.price = this.price.bind(this)
    this.priceableUnderlying = this.priceableUnderlying.bind(this)
    this.config = this.config.bind(this)
    this.pricingInfo = this.pricingInfo.bind(this)
    this.allPricingInfo = this.allPricingInfo.bind(this)
  }

  price = async ({ denom }: { denom: string }): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price: {
        denom,
      },
    })
  }
  priceableUnderlying = async ({ coin }: { coin: Coin }): Promise<ArrayOfCoin> => {
    return this.client.queryContractSmart(this.contractAddress, {
      priceable_underlying: {
        coin,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  pricingInfo = async ({ denom }: { denom: string }): Promise<VaultPricingInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pricing_info: {
        denom,
      },
    })
  }
  allPricingInfo = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }): Promise<ArrayOfVaultPricingInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_pricing_info: {
        limit,
        start_after: startAfter,
      },
    })
  }
}
export interface MarsOracleAdapterInterface extends MarsOracleAdapterReadOnlyInterface {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      newConfig,
    }: {
      newConfig: ConfigUpdates
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MarsOracleAdapterClient
  extends MarsOracleAdapterQueryClient
  implements MarsOracleAdapterInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
  }

  updateConfig = async (
    {
      newConfig,
    }: {
      newConfig: ConfigUpdates
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          new_config: newConfig,
        },
      },
      fee,
      memo,
      funds,
    )
  }
}
