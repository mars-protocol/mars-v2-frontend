// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  CallbackMsg,
  Addr,
  Coin,
  QueryMsg,
  ArrayOfCoin,
} from './MarsV2ZapperBase.types'
import { MarsV2ZapperBaseQueryClient, MarsV2ZapperBaseClient } from './MarsV2ZapperBase.client'
export const marsV2ZapperBaseQueryKeys = {
  contract: [
    {
      contract: 'marsV2ZapperBase',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...marsV2ZapperBaseQueryKeys.contract[0], address: contractAddress }] as const,
  estimateProvideLiquidity: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...marsV2ZapperBaseQueryKeys.address(contractAddress)[0],
        method: 'estimate_provide_liquidity',
        args,
      },
    ] as const,
  estimateWithdrawLiquidity: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...marsV2ZapperBaseQueryKeys.address(contractAddress)[0],
        method: 'estimate_withdraw_liquidity',
        args,
      },
    ] as const,
}
export interface MarsV2ZapperBaseReactQuery<TResponse, TData = TResponse> {
  client: MarsV2ZapperBaseQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MarsV2ZapperBaseEstimateWithdrawLiquidityQuery<TData>
  extends MarsV2ZapperBaseReactQuery<ArrayOfCoin, TData> {
  args: {
    coinIn: Coin
  }
}
export function useMarsV2ZapperBaseEstimateWithdrawLiquidityQuery<TData = ArrayOfCoin>({
  client,
  args,
  options,
}: MarsV2ZapperBaseEstimateWithdrawLiquidityQuery<TData>) {
  return useQuery<ArrayOfCoin, Error, TData>(
    marsV2ZapperBaseQueryKeys.estimateWithdrawLiquidity(client?.contractAddress, args),
    () =>
      client
        ? client.estimateWithdrawLiquidity({
            coinIn: args.coinIn,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsV2ZapperBaseEstimateProvideLiquidityQuery<TData>
  extends MarsV2ZapperBaseReactQuery<Uint128, TData> {
  args: {
    coinsIn: Coin[]
    lpTokenOut: string
  }
}
export function useMarsV2ZapperBaseEstimateProvideLiquidityQuery<TData = Uint128>({
  client,
  args,
  options,
}: MarsV2ZapperBaseEstimateProvideLiquidityQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    marsV2ZapperBaseQueryKeys.estimateProvideLiquidity(client?.contractAddress, args),
    () =>
      client
        ? client.estimateProvideLiquidity({
            coinsIn: args.coinsIn,
            lpTokenOut: args.lpTokenOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface MarsV2ZapperBaseCallbackMutation {
  client: MarsV2ZapperBaseClient
  msg: CallbackMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsV2ZapperBaseCallbackMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsV2ZapperBaseCallbackMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsV2ZapperBaseCallbackMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.callback(msg, fee, memo, funds),
    options,
  )
}
export interface MarsV2ZapperBaseWithdrawLiquidityMutation {
  client: MarsV2ZapperBaseClient
  msg: {
    minimumReceive: Coin[]
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsV2ZapperBaseWithdrawLiquidityMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsV2ZapperBaseWithdrawLiquidityMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsV2ZapperBaseWithdrawLiquidityMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.withdrawLiquidity(msg, fee, memo, funds),
    options,
  )
}
export interface MarsV2ZapperBaseProvideLiquidityMutation {
  client: MarsV2ZapperBaseClient
  msg: {
    lpTokenOut: string
    minimumReceive: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMarsV2ZapperBaseProvideLiquidityMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MarsV2ZapperBaseProvideLiquidityMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, MarsV2ZapperBaseProvideLiquidityMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.provideLiquidity(msg, fee, memo, funds),
    options,
  )
}
