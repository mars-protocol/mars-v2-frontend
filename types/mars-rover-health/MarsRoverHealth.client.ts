// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  QueryMsg,
  AccountKind,
  ConfigResponse,
  OwnerResponse,
  Decimal,
  Uint128,
  HealthResponse,
} from './MarsRoverHealth.types'
export interface MarsRoverHealthReadOnlyInterface {
  contractAddress: string
  health: ({ accountId, kind }: { accountId: string; kind: AccountKind }) => Promise<HealthResponse>
  config: () => Promise<ConfigResponse>
}
export class MarsRoverHealthQueryClient implements MarsRoverHealthReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.health = this.health.bind(this)
    this.config = this.config.bind(this)
  }

  health = async ({
    accountId,
    kind,
  }: {
    accountId: string
    kind: AccountKind
  }): Promise<HealthResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      health: {
        account_id: accountId,
        kind,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
}
export interface MarsRoverHealthInterface extends MarsRoverHealthReadOnlyInterface {
  contractAddress: string
  sender: string
  updateOwner: (
    ownerUpdate: OwnerUpdate,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateConfig: (
    {
      creditManager,
      params,
    }: {
      creditManager?: string
      params?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class MarsRoverHealthClient
  extends MarsRoverHealthQueryClient
  implements MarsRoverHealthInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateOwner = this.updateOwner.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
  }

  updateOwner = async (
    ownerUpdate: OwnerUpdate,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_owner: ownerUpdate,
      },
      fee,
      memo,
      _funds,
    )
  }
  updateConfig = async (
    {
      creditManager,
      params,
    }: {
      creditManager?: string
      params?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          credit_manager: creditManager,
          params,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
}
